binwidth = 1000,
color = NA,
alpha = 0.5
) +
geom_histogram(
data = test_drytowet_season_sums,
aes(x = max_area, fill = "Max"),
binwidth = 1000,
color = NA,
alpha = 0.5
) +
labs(x = "Area (km²)", y = "Count", fill = NULL) +
scale_fill_manual(values = c("black", "red")) +
theme(legend.position = c(0.85, 0.85),
legend.background = element_blank())
# Duration
plots[[2]] <- ggplot(test_drytowet_season_sums) +
geom_histogram(aes(x = duration), binwidth = 12) +
labs(x = "Duration (min)", y = "Count")
# Max, Mean Z
plots[[3]] <- ggplot(test_drytowet_season) +
geom_histogram(
aes(x = max, fill = "Max"),
binwidth = 1,
color = NA,
alpha = 0.5
) +
geom_histogram(
aes(x = mean, fill = "Mean"),
binwidth = 1,
color = NA,
alpha = 0.5
) +
labs(x = "Reflectivity (dBZ)", y = "Count", fill = NULL) +
scale_fill_manual(values = c("red", "darkgreen")) +
theme(legend.position = c(0.85, 0.85),
legend.background = element_blank())
# Type of event
plots[[4]] <- ggplot(test_drytowet_season) +
geom_histogram(aes(x = event), stat = "count") +
stat_count(
aes(x = event, y = ..count.., label = ..count..),
geom = "text",
vjust = -0.5,
size = 3
) +
labs(x = "Type", y = "Count") +
scale_y_continuous(expand = expansion(mult = c(0, .15)))
# Joining filter plots
grid <- plot_grid(plotlist = plots, labels = "auto")
title <- ggdraw() +
draw_label(
paste(
"Dry-to-Wet Season Test - 2014-11-20 to 2014-11-21 -",
total_families,
"families"
),
x = 0,
hjust = -0.25,
size = 13
) +
theme(plot.margin = margin(0, 0, 0, 0))
save_plot(
"out/figs/test_drytowet_season_stats.png",
plot_grid(
title,
grid,
ncol = 1,
rel_heights = c(0.1, 1),
greedy = F
),
base_width = 7.5,
base_height = 4.5,
dpi = 300,
bg = "transparent"
)
#-------------------------------------------------------------------------------
# WET SEASON
# Reading data
test_wet_season <- read_csv("out/test_wet_season_filter.csv",
col_types = cols(timestamp = col_datetime(format = "%Y-%m-%d %H:%M:%S"))) %>%
mutate(count = count, event = str_replace(event, "_", "\n")) # count * 4 for 2-km res
test_wet_season_sums <- test_wet_season %>%
group_by(name) %>%
summarize(duration = difftime(max(timestamp), min(timestamp), units = "mins"),
max_area = max(count))
total_families <- test_wet_season %>%
group_by(name) %>%
summarise() %>%
count() %>%
unlist()
# Converting strings to geometries
centroids <- st_as_sf(test_wet_season, wkt = "centroid")
geoms <- st_as_sf(test_wet_season, wkt = "geom")
st_crs(centroids) <- 4326
st_crs(geoms) <- 4326
# Plotting distributions
plots <- list()
# Size (count)
plots[[1]] <- ggplot(test_wet_season) +
geom_histogram(
aes(x = count, fill = "All"),
binwidth = 100,
color = NA,
alpha = 0.5
) +
geom_histogram(
data = test_wet_season_sums,
aes(x = max_area, fill = "Max"),
binwidth = 100,
color = NA,
alpha = 0.5
) +
labs(x = "Area (km²)", y = "Count", fill = NULL) +
scale_fill_manual(values = c("black", "red")) +
theme(legend.position = c(0.85, 0.85),
legend.background = element_blank())
# Duration
plots[[2]] <- ggplot(test_wet_season_sums) +
geom_histogram(aes(x = duration), binwidth = 12) +
labs(x = "Duration (min)", y = "Count")
# Max, Mean Z
plots[[3]] <- ggplot(test_wet_season) +
geom_histogram(
aes(x = max, fill = "Max"),
binwidth = 1,
color = NA,
alpha = 0.5
) +
geom_histogram(
aes(x = mean, fill = "Mean"),
binwidth = 1,
color = NA,
alpha = 0.5
) +
labs(x = "Reflectivity (dBZ)", y = "Count", fill = NULL) +
scale_fill_manual(values = c("red", "darkgreen")) +
theme(legend.position = c(0.85, 0.85),
legend.background = element_blank())
# Type of event
plots[[4]] <- ggplot(test_wet_season) +
geom_histogram(aes(x = event), stat = "count") +
stat_count(
aes(x = event, y = ..count.., label = ..count..),
geom = "text",
vjust = -0.5,
size = 3
) +
labs(x = "Type", y = "Count") +
scale_y_continuous(expand = expansion(mult = c(0, .15)))
# Joining filter plots
grid <- plot_grid(plotlist = plots, labels = "auto")
title <- ggdraw() +
draw_label(
paste(
"Wet Season Test - 2015-04-03 to 2015-04-04 -",
total_families,
"families"
),
x = 0,
hjust = -0.25,
size = 13
) +
theme(plot.margin = margin(0, 0, 0, 0))
save_plot(
"out/figs/test_wet_season_stats.png",
plot_grid(
title,
grid,
ncol = 1,
rel_heights = c(0.1, 1),
greedy = F
),
base_width = 7.5,
base_height = 4.5,
dpi = 300,
bg = "transparent"
)
View(goamazon_1)
library(readr)
goamazon_1 <- read_csv("out/goamazon/cptec_cappi_goamazon_1.csv",
col_types = cols(relationships = col_character()))
View(goamazon_1)
goamazon_1$relationships
goamazon_1[,201]
goamazon_1[201,]
goamazon_1[192,]
goamazon_1[166,]
goamazon_1 %>% filter(name="c8396086-a29c-47ae-9695-5c1a80a85da2")
goamazon_1 %>% filter(name == "c8396086-a29c-47ae-9695-5c1a80a85da2")
goamazon_1 %>% filter(name == "f012d1b7-0e01-4486-903f-79091da7427a")
goamazon_1[96,]
goamazon_1 %>% filter(name == "247b02ac-c981-424a-a003-2a15322ea8cc")
goamazon_1 %>% filter(name == "87a5adf5-2244-49c6-ad29-0322c83012be")
library(sf)
library(tidyverse)
library(cowplot)
goamazon_1 %>% filter(name == "0b92c512-c07a-4374-a3f9-3ea219936758")
# Loading shapefiles
cities <- st_read(
"/home/camilacl/git/amazon-storms-aerosols/data/general/shapefiles/AM_Municipios_2019.shp",
stringsAsFactors = F)
rivers <- st_read(
"/home/camilacl/git/amazon-storms-aerosols/data/general/shapefiles/ne_10m_rivers_lake_centerlines.shp",
stringsAsFactors = F)
# Loading GoAmazon sites
goam_sites <-
read_csv(
"/home/camilacl/git/amazon-storms-aerosols/data/general/goamazon_sites.csv",
locale = locale(decimal_mark = ",", grouping_mark = ".")
) %>%
gather(has, answer, c(has_aerosol, has_meteo, has_cloud)) %>%
filter(answer == "yes") %>%
distinct(goamazon_reference, .keep_all = T)
goam_circles_50 <-
map2_dfr(goam_sites$longitude,
goam_sites$latitude,
~ dfCircle(.x, .y, 50),
.id = "id") %>%
mutate(
id = ifelse(id == 1, goam_sites$goamazon_reference[1], id),
id = ifelse(id == 2, goam_sites$goamazon_reference[2], id),
id = ifelse(id == 3, goam_sites$goamazon_reference[3], id),
id = ifelse(id == 4, goam_sites$goamazon_reference[4], id),
id = ifelse(id == 5, goam_sites$goamazon_reference[5], id),
id = ifelse(id == 6, goam_sites$goamazon_reference[6], id)
)
# Function to draw circle
dfCircle <- function(LonDec, LatDec, Km) {
# - LatDec = latitude in decimal degrees of the center of the circle
# - LonDec = longitude in decimal degrees
# - Km = radius of the circle in kilometers
# Mean Earth radius in kilometers
# - Change this to 3959 and you will have your function working in miles
ER <- 6371
# Angles in degrees
AngDeg <- seq(1:360)
# Latitude of the center of the circle in radians
Lat1Rad <- LatDec * (pi / 180)
# Longitude of the center of the circle in radians
Lon1Rad <- LonDec * (pi / 180)
# Angles in radians
AngRad <- AngDeg * (pi / 180)
# Latitude of each point of the circle rearding to angle in radians
Lat2Rad <- asin(sin(Lat1Rad) * cos(Km / ER) +
cos(Lat1Rad) * sin(Km / ER) * cos(AngRad))
# Longitude of each point of the circle rearding to angle in radians
Lon2Rad <-
Lon1Rad + atan2(sin(AngRad) * sin(Km / ER) * cos(Lat1Rad),
cos(Km / ER) - sin(Lat1Rad) * sin(Lat2Rad))
# Latitude of each point of the circle rearding to angle in radians
Lat2Deg <- Lat2Rad * (180 / pi)
# Longitude of each point of the circle rearding to angle in degrees
# - Conversion of radians to degrees deg = rad*(180/pi)
Lon2Deg <- Lon2Rad * (180 / pi)
return(data.frame(lon = Lon2Deg, lat = Lat2Deg))
}
goam_circles_50 <-
map2_dfr(goam_sites$longitude,
goam_sites$latitude,
~ dfCircle(.x, .y, 50),
.id = "id") %>%
mutate(
id = ifelse(id == 1, goam_sites$goamazon_reference[1], id),
id = ifelse(id == 2, goam_sites$goamazon_reference[2], id),
id = ifelse(id == 3, goam_sites$goamazon_reference[3], id),
id = ifelse(id == 4, goam_sites$goamazon_reference[4], id),
id = ifelse(id == 5, goam_sites$goamazon_reference[5], id),
id = ifelse(id == 6, goam_sites$goamazon_reference[6], id)
)
# Plot settings
theme_set(theme_bw())
theme_update(
plot.title = element_text(hjust = 0.5),
plot.background = element_rect(fill = "transparent", colour = NA)
)
# Reading TATHU data
goamazon <- read_csv("out/goamazon/cptec_cappi_goamazon_1.csv",
col_types = cols(
relationships = col_character(), timestamp = col_datetime(format = "%Y-%m-%d %H:%M:%S")))
goamazon_sums <- goamazon %>%
group_by(name) %>%
summarize(duration = difftime(max(timestamp), min(timestamp), units = "mins"),
max_area = max(count))
total_families <- goamazon %>%
group_by(name) %>%
summarise() %>%
count() %>%
unlist()
# Converting strings to geometries
centroids <- st_as_sf(goamazon, wkt = "centroid")
geoms <- st_as_sf(goamazon, wkt = "geom")
st_crs(centroids) <- 4326
st_crs(geoms) <- 4326
# Plotting distributions
plots <- list()
# Size (count)
plots[[1]] <- ggplot(goamazon) +
geom_histogram(
aes(x = count, fill = "All"),
binwidth = 100,
color = NA,
alpha = 0.5
) +
geom_histogram(
data = goamazon_sums,
aes(x = max_area, fill = "Max"),
binwidth = 100,
color = NA,
alpha = 0.5
) +
labs(x = "Area (km²)", y = "Count", fill = NULL) +
scale_fill_manual(values = c("black", "red")) +
theme(legend.position = c(0.85, 0.85),
legend.background = element_blank())
# Duration
plots[[2]] <- ggplot(goamazon_sums) +
geom_histogram(aes(x = duration), binwidth = 12) +
labs(x = "Duration (min)", y = "Count")
# Max, Mean Z
plots[[3]] <- ggplot(goamazon) +
geom_histogram(
aes(x = max, fill = "Max"),
binwidth = 1,
color = NA,
alpha = 0.5
) +
geom_histogram(
aes(x = mean, fill = "Mean"),
binwidth = 1,
color = NA,
alpha = 0.5
) +
labs(x = "Reflectivity (dBZ)", y = "Count", fill = NULL) +
scale_fill_manual(values = c("red", "darkgreen")) +
theme(legend.position = c(0.85, 0.85),
legend.background = element_blank())
# Type of event
plots[[4]] <- ggplot(goamazon) +
geom_histogram(aes(x = event), stat = "count") +
stat_count(
aes(x = event, y = ..count.., label = ..count..),
geom = "text",
vjust = -0.5,
size = 3
) +
labs(x = "Type", y = "Count") +
scale_y_continuous(expand = expansion(mult = c(0, .15)))
# Joining filter plots
grid <- plot_grid(plotlist = plots, labels = "auto")
title <- ggdraw() +
draw_label(
paste(
"GoAmazon Period 1 -",
total_families,
"families"
),
x = 0,
hjust = -0.35,
size = 13
) +
theme(plot.margin = margin(0, 0, 0, 0))
grid
# Reading TATHU data
goamazon <- read_csv("out/goamazon/cptec_cappi_goamazon_1.csv",
relationships = col_character(), timestamp = col_datetime(format = "%Y-%m-%d %H:%M:%S"))) %>%
# Reading TATHU data
goamazon <- read_csv("out/goamazon/cptec_cappi_goamazon_1.csv",
col_types = cols(
relationships = col_character(), timestamp = col_datetime(format = "%Y-%m-%d %H:%M:%S"))) %>%
mutate(event = str_replace(event, "_", "\n"))
# Plotting distributions
plots <- list()
# Size (count)
plots[[1]] <- ggplot(goamazon) +
geom_histogram(
aes(x = count, fill = "All"),
binwidth = 100,
color = NA,
alpha = 0.5
) +
geom_histogram(
data = goamazon_sums,
aes(x = max_area, fill = "Max"),
binwidth = 100,
color = NA,
alpha = 0.5
) +
labs(x = "Area (km²)", y = "Count", fill = NULL) +
scale_fill_manual(values = c("black", "red")) +
theme(legend.position = c(0.85, 0.85),
legend.background = element_blank())
# Duration
plots[[2]] <- ggplot(goamazon_sums) +
geom_histogram(aes(x = duration), binwidth = 12) +
labs(x = "Duration (min)", y = "Count")
# Max, Mean Z
plots[[3]] <- ggplot(goamazon) +
geom_histogram(
aes(x = max, fill = "Max"),
binwidth = 1,
color = NA,
alpha = 0.5
) +
geom_histogram(
aes(x = mean, fill = "Mean"),
binwidth = 1,
color = NA,
alpha = 0.5
) +
labs(x = "Reflectivity (dBZ)", y = "Count", fill = NULL) +
scale_fill_manual(values = c("red", "darkgreen")) +
theme(legend.position = c(0.85, 0.85),
legend.background = element_blank())
# Type of event
plots[[4]] <- ggplot(goamazon) +
geom_histogram(aes(x = event), stat = "count") +
stat_count(
aes(x = event, y = ..count.., label = ..count..),
geom = "text",
vjust = -0.5,
size = 3
) +
labs(x = "Type", y = "Count") +
scale_y_continuous(expand = expansion(mult = c(0, .15)))
# Joining filter plots
grid <- plot_grid(plotlist = plots, labels = "auto")
grid
# Trajectories
plt <- ggplot(geoms) +
# geom_sf(
#   data = cities,
#   fill = NA,
#   size = 0.4,
#   color = "gray"
# ) +
geom_sf(
data = rivers,
fill = NA,
size = 0.4,
color = "lightblue"
) +
geom_rect(
aes(
xmin = -61.343496,
xmax = -58.640505,
ymin = -4.505793,
ymax = -1.792021
),
fill = NA,
color = "black"
) +
geom_sf(
data = geoms,
aes(color = name),
fill = NA,
size = 0.5,
show.legend = F
) +
# geom_sf(
#   data = centroids,
#   aes(color = name),
#   fill = NA,
#   show.legend = F
# ) +
coord_sf(
xlim = c(-61.343496, -58.640505),
ylim = c(-4.505793, -1.792021),
expand = T
) +
facet_wrap(vars(as.character(timestamp)), nrow = 5)
plt
plt
library(sf)
library(tidyverse)
# Loading GLD data
files <- fs::dir_ls(path = "/home/camila/git/amazon-storms-aerosols/data/lightning/GLD/", glob = "GLD360_*.txt")
# Loading GLD data
files <- fs::dir_ls(path = "/home/camilacl/git/amazon-storms-aerosols/data/lightning/GLD/", glob = "GLD360_*.txt")
# Loading GLD data
files <- fs::dir_ls(path = "/home/camilacl/git/amazon-storms-aerosols/data/lightning/GLD", glob = "GLD360_*.txt")
# Loading GLD data
files <- fs::dir_ls(path = "/home/camilacl/git/amazon-storms-aerosols/data/lightning/GLD", glob = "GLD360_*.txt")
files
library(sf)
library(tidyverse)
library(lubridate)
# Loading radar filenames to get timestamps
files_radar <- fs::dir_ls(path = "/data2/GOAMAZON/radar/sipam_manaus/cptec_cappi",
glob = "*.dat.gz", recurse = T) %>%
str_extract("cappi_\\d+.dat.gz") %>%
str_extract("\\d+") %>%
parse_date_time("ymdHM")
dates_radar <- tibble(timestamp = files_radar) %>%
mutate(time_interval = interval(timestamp, timestamp + 12*60))
# Loading GLD data
files_gld <- fs::dir_ls(path = "/data2/GOAMAZON/lightning/GLD360/GLD360_txt_by_day",
glob = "*.txt")
gld <- read_csv(files_gld, id = "path",
col_types = cols(t = col_datetime(format = "%Y-%m-%d %H:%M:%S")))
format(dates_radar$timestamp[1], format="ymdHM")
format(dates_radar$timestamp[1], format="%Y%m%d%H%M")
gld %>%
filter(t %within% dates_radar$time_interval[1]) %>%
mutate(t_radar = dates_radar$timestamp[1]) %>%
write_csv(paste0("/home/camilacl/git/amazon-storms-aerosols/data/lightning/GLD_mod/GLD360_mod_", format(dates_radar$timestamp[1], format="%Y%m%d%H%M"), ".csv"))
for(j in 1:length(dates_radar$timestamp)){
gld %>%
filter(t %within% dates_radar$time_interval[j]) %>%
mutate(t_radar = dates_radar$timestamp[j]) %>%
write_csv(paste0("/home/camilacl/git/amazon-storms-aerosols/data/lightning/GLD_mod/GLD360_mod_", format(dates_radar$timestamp[j], format="%Y%m%d%H%M"), ".csv"))
}
